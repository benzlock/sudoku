#!/usr/bin/env bash

if [[ $# == 0 ]]; then
	echo "usage: sudoku 6..8.32.......9.41.9..2........173...1.9.8.7...863........9..5.92.3.......37.6..4 641873295832569741597421638459217386316948572278635419764192853925384167183756924 -pf '\Huge{' -sf '\textcolor{red}{\Huge{'"
	exit 0
fi

# check that the solution is valid
function checkSolution {
	# given a house, check that digits 0-9 are all present
	function check {
        for (( k=1; k<=9; k++ )); do
            if [[ ! $1 =~ $k ]]; then
                echo invalid solution
                exit 1
            fi
        done
    }

    # check columns
    for (( i=0; i<9; i++ )); do
        h=""
        for (( j=i; j<81; j+=9 )); do
            h+=${1:$j:1}
        done

        check $h
    done

    # check rows
    for (( i=0; i<81; i+=9 )); do
        check ${1:$i:9}
    done

    # check boxes
    for i in 0 3 6 27 30 33 54 57 60; do
        check ${1:$i:3}${1:$i+9:3}${1:$i+18:3}
    done
}

# add a comma after every character
function format {
    out=""
    for (( i=0; i<${#1}; i++ )); do
        out+=${1:$i:1},
    done
    echo ${out%?}
}

# make sure pdflatex and ImageMagick are both installed
if [[ ! $( command -v pdflatex ) ]]; then
    echo pdflatex is required
    exit 1
fi

if [[ ! $( command -v convert ) ]]; then
    echo ImageMagick is required
    exit 1
fi

# get problem, solution, problem formatting, and solution formatting from arguments
while [[ $@ ]]; do
    if [[ $1 =~ [0-9]{81} ]]; then
        s=$1
        shift
    elif [[ $1 =~ [0-9\.]{81} ]]; then
        p=$1
        shift
    elif [[ $1 == -pf ]]; then
        pf=$2
        shift 2
    elif [[ $1 == -sf ]]; then
        sf=$2
        shift 2
	elif [[ $1 == -f ]]; then
		f=$2
		shift 2
    else
		shift
	fi
done

# set default values for problem formatting and solution formatting
if [[ ! $pf ]]; then
	pf='\Huge{'
fi
if [[ ! $sf ]] && [[ $p ]]; then
	sf='\textcolor{red}{\Huge{'
elif [[ ! $sf ]] && [[ ! $p ]]; then
	sf='\Huge{'
fi
# set default value for the typeface
if [[ ! $f ]]; then
	f='cmbright'
fi

# check that at every character of the problem that is not blank, it
#Â matches the solution
if [[ $p ]] && [[ $s ]]; then
	for (( i=0; i<81; i++ )); do
		if [[ ${p:$i:1} != . ]] && [[ ${p:$i:1} != ${s:$i:1} ]]; then
			echo problem and solution do not match at index $i
			exit 1
		fi
	done
fi

# check that the solution is valid
if [[ $s ]]; then
	checkSolution $s
fi

# replace every character of the solution that is in the problem
# with a blank
if [[ $p ]] && [[ $s ]]; then
	for (( i=0; i<81; i++ )); do
		if [[ ${p:$i:1} == ${s:$i:1} ]]; then
			s=$( echo $s | sed s/./\./$( expr $i + 1) )
		fi
	done
fi

# format the problem and the solution to be inserted into LaTeX code
s=$( format $s )
p=$( format $p )

# count the number of { characters that have no closing }
pBrackets=$( expr $( echo $pf | tr -cd '{' | wc -c ) - $( echo $pf | tr -cd '}' | wc -c ) )
sBrackets=$( expr $( echo $sf | tr -cd '{' | wc -c ) - $( echo $sf | tr -cd '}' | wc -c ) )

# add \v to the ends of the formatting strings; \v is the loop
# variable used in the LaTeX
pf=$pf'\v'
sf=$sf'\v'

# close all of the opened curly brackets
for (( i=0; i<$pBrackets; i++ )); do pf+='}'; done
for (( i=0; i<$sBrackets; i++ )); do sf+='}'; done

if [[ $p ]]; then
	touch problem.png
	echo "\documentclass{standalone}
	\usepackage{tikz,stringstrings,pagecolor,$f}
	\pagecolor{white}

	\begin{document}
	\begin{tikzpicture}
		\draw[ultra thick] (0,0) rectangle (9,9);
		\draw[very thick, step=3] (0,0) grid (9,9);
		\draw[step=1] (0,0) grid (9,9);
		\foreach \v [count=\i from 0] in {$p} {
			\node at ({Mod(\i,9)+0.5},{int(\i/9)+0.5}) {\ifthenelse{\equal{\v}{.}}{}{$pf}};
		}
	\end{tikzpicture}
	\end{document}" > sudoku.tex
	pdflatex sudoku.tex &> /dev/null
	convert -density 300 -define profile:skip=ICC sudoku.pdf problem.png
fi
if [[ $s ]] && [[ $p ]]; then
	touch solution.png
	echo "\documentclass{standalone}
	\usepackage{tikz,stringstrings,pagecolor,$f}
	\pagecolor{white}

	\begin{document}
	\begin{tikzpicture}
		\draw[ultra thick] (0,0) rectangle (9,9);
		\draw[very thick, step=3] (0,0) grid (9,9);
		\draw[step=1] (0,0) grid (9,9);
		\foreach \v [count=\i from 0] in {$s} {
			\node at ({Mod(\i,9)+0.5},{int(\i/9)+0.5}) {\ifthenelse{\equal{\v}{.}}{}{$sf}};
		}
		\foreach \v [count=\i from 0] in {$p} {
			\node at ({Mod(\i,9)+0.5},{int(\i/9)+0.5}) {\ifthenelse{\equal{\v}{.}}{}{$pf}};
		}
	\end{tikzpicture}
	\end{document}" > sudoku.tex
	pdflatex sudoku.tex &> /dev/null
	convert -density 300 -define profile:skip=ICC sudoku.pdf solution.png
elif [[ $s ]] && [[ ! $p ]]; then
	touch solution.png
	echo "\documentclass{standalone}
	\usepackage{tikz,stringstrings,pagecolor,$f}
	\pagecolor{white}

	\begin{document}
	\begin{tikzpicture}
		\draw[ultra thick] (0,0) rectangle (9,9);
		\draw[very thick, step=3] (0,0) grid (9,9);
		\draw[step=1] (0,0) grid (9,9);
		\foreach \v [count=\i from 0] in {$s} {
			\node at ({Mod(\i,9)+0.5},{int(\i/9)+0.5}) {\ifthenelse{\equal{\v}{.}}{}{$sf}};
		}
	\end{tikzpicture}
	\end{document}" > sudoku.tex
	pdflatex sudoku.tex &> /dev/null
	convert -density 300 -define profile:skip=ICC sudoku.pdf solution.png
fi

rm sudoku.*
